name: Docker Image Build and Push

on:
    workflow_call:
        inputs:
            build_type:
                description: "Build type (e.g., java, go, web, web-secure)"
                required: false
                type: string
                default: "web"
            image_prefix:
                description: "Container registry prefix (e.g., ghcr.io)"
                required: true
                type: string
            org_name:
                description: "Organization name"
                required: true
                type: string
            app_name:
                description: "Application name"
                required: true
                type: string
            build_context:
                description: "Docker build context"
                required: true
                type: string
            build_file:
                description: "Path to the Dockerfile"
                required: false
                type: string
                default: "./Dockerfile"
            build_args:
                description: "Extra build arguments"
                required: false
                type: string
        secrets:
            APP_ID:
                required: false
                description: "GitHub App ID to download AOH go modules"
            APP_PRIVATE_KEY:
                required: false
                description: "GitHub App Private Key to download AOH go modules"
        outputs:
            image_tag:
                description: "The full image tag that was built and pushed"
                value: ${{ jobs.build-and-push.outputs.image_tag }}

jobs:
    build-and-push:
        name: "Build & Publish Image"
        runs-on: ubuntu-latest
        outputs:
            image_tag: ${{ steps.build_and_upload.outputs.image_tag }}
        steps:
            - name: "Generate GitHub App Token"
              if: ${{ inputs.build_type == 'go' }}
              uses: actions/create-github-app-token@v1
              id: app-token
              with:
                  app-id: ${{ secrets.APP_ID }}
                  private-key: ${{ secrets.APP_PRIVATE_KEY }}
                  owner: ${{ inputs.org_name }}

            - name: "☁️ Checkout code"
              uses: actions/checkout@v4
              with:
                  path: ./src

            - name: "Extract Maven project version"
              if: ${{ inputs.build_type == 'java' }}
              id: getVersion
              run: |
                  cd ./src/${{ inputs.build_context }}
                  echo "version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

            - name: "Log in to the Container registry"
              uses: docker/login-action@v3
              with:
                  registry: ${{ inputs.image_prefix }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: "📦 ${{ inputs.app_name }} - Build and upload container image"
              id: build_and_upload
              env:
                  ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  cd ./src

                  if [[ "${{ github.ref }}" == "refs/tags/"* || "${{ github.event_name }}" == "release" ]]; then
                    git_hash=$(git rev-parse --short "$GITHUB_SHA")
                    TAG="${GITHUB_REF##*/}"
                  else
                    git_hash=$(git rev-parse --short "$GITHUB_SHA")
                    TAG="${GITHUB_REF##*/}-${git_hash}"
                  fi

                  BASE_IMAGE_TAG="${{ inputs.image_prefix }}/${{ inputs.org_name }}/${{ inputs.app_name }}"
                  IMAGE_TAG="${BASE_IMAGE_TAG}:${TAG}"
                  echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

                  export IMAGE_TAG=${IMAGE_TAG}
                  export DOCKER_BUILDKIT=1

                  BUILD_ARGS="--build-arg REVISION=${TAG} ${{ inputs.build_args }}"

                  if [[ "${{ inputs.build_type }}" == "go" ]]; then
                    BUILD_ARGS="${BUILD_ARGS} --build-arg GITHUB_USERNAME=x-access-token --build-arg GITHUB_TOKEN=${{ steps.app-token.outputs.token }}"
                  elif [[ "${{ inputs.build_type }}" == "java" ]]; then
                    BUILD_ARGS="${BUILD_ARGS} --build-arg APP_VERSION=${{ steps.getVersion.outputs.version }}"
                  elif [[ "${{ inputs.build_type }}" == "web" ]]; then
                    BUILD_ARGS="${BUILD_ARGS} --build-arg PUBLIC_STATIC_BUILD_VERSION=${TAG} --build-arg GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
                  elif [[ "${{ inputs.build_type }}" == "web-secure" ]]; then
                    BUILD_ARGS="${BUILD_ARGS} --build-arg PUBLIC_STATIC_BUILD_VERSION=${TAG} --secret id=access_token,env=ACCESS_TOKEN"
                  fi

                  docker build -t ${IMAGE_TAG} -f ${{ inputs.build_file }} ${BUILD_ARGS} ${{ inputs.build_context }}
                  docker push ${IMAGE_TAG}

                  if [[ "${{ github.ref }}" == "refs/tags/"* || "${{ github.event_name }}" == "release" ]]; then
                    ## Extra "latest" Tag
                    docker tag ${IMAGE_TAG} ${BASE_IMAGE_TAG}:latest
                    docker push ${BASE_IMAGE_TAG}:latest
                  else
                    ## Extra "latest-dev" Tag
                    docker tag ${IMAGE_TAG} ${BASE_IMAGE_TAG}:latest-dev
                    docker push ${BASE_IMAGE_TAG}:latest-dev
                  fi
