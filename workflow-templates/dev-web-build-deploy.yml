name: Build & Deploy Module's Web Console
# env:
#   image_prefix: ghcr.io
#   org_name: mssfoobar
#   app_name: gis/gis-web
#   manifest_repo: mssfoobar/dev-infra
#   manifest_branch: main
#   manifest_values_path: manifests/gis-web/gis-web-deployment.yml

# on:
#   workflow_dispatch:
#   release:
#   push:
#     branchesw:
#       - develop
#       - release/**
#     paths:
#       - "web/**"
#       - "!.github/workflows/**"

# concurrency:
#   group: ci-gis-web-${{ github.ref }}
#   cancel-in-progress: true

# defaults:
#   run:
#     shell: bash

# jobs:
#   image:
#     name: "Build & Publish Image"
#     runs-on: ubuntu-latest
#     outputs:
#       image_tag: ${{ steps.build_and_upload.outputs.image_tag }}
#     steps:
#       - uses: actions/create-github-app-token@v1
#         id: app-token
#         with:
#           app-id: ${{ vars.DEPLOYMENT_APP_ID }}
#           private-key: ${{ secrets.DEPLOYMENT_APP_PRIVATE_KEY }}

#       - name: "☁️ Checkout code"
#         uses: actions/checkout@v4
#         with:
#           path: ./src

#       - name: "Log in to the Container registry"
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.image_prefix }}
#           username: ${{ github.actor }}
#           password: ${{ steps.app-token.outputs.token }}

#       - name: "📦 ${{ env.app_name }} - Build and upload container image"
#         id: build_and_upload
#         run: |
#           cd ./src

#           if [ "${{ github.event_name }}" == "release" ]; then
#             git_hash=$(git rev-parse --short "$GITHUB_SHA")
#             TAG="${GITHUB_REF##*/}"
#           else
#             git_hash=$(git rev-parse --short "$GITHUB_SHA")
#             TAG="${GITHUB_REF##*/}-${git_hash}"
#           fi

#           cd ./web

#           BASE_IMAGE_TAG="${{ env.image_prefix }}/${{ env.org_name }}/${{ env.app_name }}"
#           WEB_IMAGE_TAG="${BASE_IMAGE_TAG}:${TAG}"
#           echo "image_tag=${WEB_IMAGE_TAG}" >> $GITHUB_OUTPUT

#           export WEB_IMAGE_TAG=${WEB_IMAGE_TAG}
#           docker build . --build-arg PUBLIC_STATIC_BUILD_VERSION=${TAG} --build-arg GITHUB_TOKEN=${{ steps.app-token.outputs.token }} --build-arg REVISION=${TAG} -t ${WEB_IMAGE_TAG}
#           docker push ${WEB_IMAGE_TAG}

#           if [ "${{ github.event_name }}" == "release" ]; then
#             ## Extra "latest" Tag
#             docker tag ${WEB_IMAGE_TAG} ${BASE_IMAGE_TAG}:latest
#             docker push ${BASE_IMAGE_TAG}:latest
#           else
#             ## Extra "latest-dev" Tag
#             docker tag ${WEB_IMAGE_TAG} ${BASE_IMAGE_TAG}:latest-dev
#             docker push ${BASE_IMAGE_TAG}:latest-dev
#           fi
#   deploy:
#     needs:
#       - image
#     name: "Update Deployment Manifest"
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/create-github-app-token@v1
#         id: app-token
#         with:
#           app-id: ${{ vars.DEPLOYMENT_APP_ID }}
#           private-key: ${{ secrets.DEPLOYMENT_APP_PRIVATE_KEY }}

#       - name: "Checkout Manifest Repository"
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ env.manifest_branch }}
#           repository: ${{ env.manifest_repo }}
#           token: ${{ steps.app-token.outputs.token }}
#           path: ./deploy-workspace

#       ## == Deployment Manifest Update for Development Environment ==
#       - name: "Update container image tag in deployment manifest"
#         if: github.ref_name == 'develop'
#         run: |
#           valuesFile=./deploy-workspace/${{ env.manifest_values_path }}
#           oldTag=$(cat $valuesFile | grep image: | head -n 1 | awk '{print $2}' | tr -d '\n')
#           echo "** $valuesFile ::: replacing $oldTag with ${{ needs.image.outputs.image_tag }}"
#           sed -i "s|$oldTag|${{ needs.image.outputs.image_tag }}|" $valuesFile
